parser

- headers
- denominator
- bar duration
- voice-stack map
- keysig

<parse headers>
for each stack:
	base_stack = Stack()
	base_sequence = TuneSequence()
	first_sequence = TuneSequence()
	base_sequence.add(first_sequence)
	base_stack.push(base_sequence)
	base_stack.push(first_sequence)
	voice-stack[voice] = base_stack
	
cur_stack = voice-stack[initial_voice]
bar_keysig = keysig

for each token:
	switch token:
	
	case VOICE:
		cur_stack = voice-stack[initial_voice]
		
	case NOTE:
		pitch = bar_keysig.getNote(NOTE.note,NOTE.octave)
		duration = Fraction(NOTE.numerator,NOTE.denominator)
		cur_stack.top.add(Note(pitch,duration))
		
		bar_duration += duration
		denominator = apply_new_denominator(NOTE.denominator)
		
	case ACCIDENTAL:
		bar_keysig = bar_keysig.applyAccidental(ACCIDENTAL.note,ACCIDENTAL.modifier)
	
	case STARTCHORD:
		new_chord = Chord()
		cur_stack.top.add(new_chord)
		cur_stack.push(new_chord)
	
	case ENDCHORD:
		cur_stack.pop()
		
	case STARTTUPLET:
		new = Tuplet(STARTTUPLET.notecount)
		cur_stack.top.add(new)
		cur_stack.push(new)
		
	case ENDTUPLET:
		cur_stack.pop()
		
	
		
		